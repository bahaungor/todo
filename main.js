(()=>{"use strict";const e=document.querySelector(".sidebar"),t=document.querySelector(".side-menu-opener"),n=document.querySelector(".main");let c=!0;function o(){j.style.display="flex"}function a(){document.querySelector(".project-form-input").value="",j.style.display="none"}function s(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function r(e){s(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function i(){document.querySelectorAll(".task-container #task-done").forEach((e=>e.addEventListener("change",l))),document.querySelectorAll(".task-container #task-importance").forEach((e=>e.addEventListener("change",d)))}function d(){this.checked?(L[this.parentNode.dataset.project].tasks[this.parentNode.dataset.id].importance=!0,localStorage.setItem("projects_by_baha",JSON.stringify(L))):(L[this.parentNode.dataset.project].tasks[this.parentNode.dataset.id].importance=!1,localStorage.setItem("projects_by_baha",JSON.stringify(L)))}function l(){this.checked?(L[this.parentNode.dataset.project].tasks[this.parentNode.dataset.id].done=!0,localStorage.setItem("projects_by_baha",JSON.stringify(L))):(L[this.parentNode.dataset.project].tasks[this.parentNode.dataset.id].done=!1,localStorage.setItem("projects_by_baha",JSON.stringify(L)))}t.addEventListener("click",(function(){c?(e.style.display="none",n.style.gridTemplateColumns="1fr",c=!1):(e.style.display="block",n.style.gridTemplateColumns="350px 1fr",c=!0)})),document.querySelector(".add-button").addEventListener("click",o),document.querySelector(".project-form-button.cancel").addEventListener("click",a);const u=document.querySelector(".tasks");function p(){if(0==L[g].tasks.length||""==g)u.innerHTML="",u.textContent="Yayyyy! No Tasks!";else{const e=L[g].tasks.map((e=>`\n            <div class="task-container" data-id="${e.id}" data-project="${e.projectID}">\n                <input type="checkbox" id="task-done" ${e.done?"checked":""}>\n                <div class="task-title">${e.title}</div>\n                <div class="due-date">${e.due}</div>\n                <input type="checkbox" id="task-importance" ${e.importance?"checked":""}>\n                <div class="task-details">${e.detail}</div>\n                <img class="menu-icon delete-button" src="../src/images/delete.png">\n            </div>`)).join("");u.innerHTML="",u.innerHTML=e,i(),m()}}function m(){document.querySelectorAll(".task-container .delete-button").forEach((e=>e.addEventListener("click",k))),console.log(L)}function k(){if(confirm('Are you sure you want to delete "'+L[this.parentNode.dataset.project].tasks[this.parentNode.dataset.id].title+'" task from "'+L[this.parentNode.dataset.project].projectTitle+'" ?')){L[this.parentNode.dataset.project].tasks.splice(this.parentNode.dataset.id,1);let e=0;L[this.parentNode.dataset.project].tasks.forEach((t=>{t.id=e,e++})),localStorage.setItem("projects_by_baha",JSON.stringify(L)),""==g?(document.querySelectorAll(".project").forEach((e=>e.classList.remove("active"))),document.querySelectorAll(".sidebar-item").forEach((e=>e.classList.remove("active"))),document.querySelector(".sidebar-item.all-tasks").classList.add("active"),document.querySelector(".content-title").textContent="All Tasks",document.querySelector(".add-task").classList.add("hidden"),v()):p()}}const y=document.querySelectorAll(".sidebar-item"),f=document.querySelector(".content-title");function v(){g="",console.log("selected project is "+g);const e=L.map((e=>e.tasks.map((e=>`\n            <div class="task-container" data-id="${e.id}" data-project="${e.projectID}">\n                <input type="checkbox" id="task-done" ${e.done?"checked":""}>\n                <div class="task-title">${e.title}</div>\n                <div class="due-date">${e.due}</div>\n                <input type="checkbox" id="task-importance" ${e.importance?"checked":""}>\n                <div class="task-details">${e.detail}</div>\n                <img class="menu-icon delete-button" src="../src/images/delete.png">\n            </div>`)).join(""))).join("");document.querySelector(".tasks").innerHTML="",document.querySelector(".tasks").innerHTML=e,i(),m()}function h(){const e=L.map((e=>e.tasks.map((e=>{if(0==function(e,t){s(2,arguments);var n=r(e),c=r(t),o=n.getTime()-c.getTime();return o<0?-1:o>0?1:o}(Date.parse(e.due),Date.parse((new Date).toISOString().split("T")[0])))return`\n                <div class="task-container" data-id="${e.id}" data-project="${e.projectID}">\n                    <input type="checkbox" id="task-done" ${e.done?"checked":""}>\n                    <div class="task-title">${e.title}</div>\n                    <div class="due-date">${e.due}</div>\n                    <input type="checkbox" id="task-importance" ${e.importance?"checked":""}>\n                    <div class="task-details">${e.detail}</div>\n                    <img class="menu-icon delete-button" src="../src/images/delete.png">\n                </div>`})).join(""))).join("");document.querySelector(".tasks").innerHTML="",document.querySelector(".tasks").innerHTML=e}y.forEach((e=>e.addEventListener("click",(e=>{!function(e){y.forEach((e=>e.classList.remove("active"))),document.querySelectorAll(".project").forEach((e=>e.classList.remove("active"))),e.target.classList.add("active")}(e),function(e){f.textContent=e.target.textContent,document.querySelector(".add-task").classList.add("hidden")}(e)})))),document.querySelector(".sidebar-item.all-tasks").addEventListener("click",v),document.querySelector(".sidebar-item.today").addEventListener("click",h),document.querySelector(".sidebar-item.important").addEventListener("click",(function(){const e=L.map((e=>e.tasks.map((e=>{if(1==e.importance)return`\n                <div class="task-container" data-id="${e.id}" data-project="${e.projectID}">\n                    <input type="checkbox" id="task-done" ${e.done?"checked":""}>\n                    <div class="task-title">${e.title}</div>\n                    <div class="due-date">${e.due}</div>\n                    <input type="checkbox" id="task-importance" ${e.importance?"checked":""}>\n                    <div class="task-details">${e.detail}</div>\n                    <img class="menu-icon delete-button" src="../src/images/delete.png">\n                </div>`})).join(""))).join("");document.querySelector(".tasks").innerHTML="",document.querySelector(".tasks").innerHTML=e}));let g="";let S=!1;const j=document.querySelector(".project-form");function b(){let e=0;L.forEach((t=>{t.id=e,e++}))}function q(e){confirm("Are you sure you want to delete "+L[e.currentTarget.parentNode.dataset.id].projectTitle+" & tasks inside it?")&&(L.splice(e.currentTarget.parentNode.dataset.id,1),localStorage.setItem("projects_by_baha",JSON.stringify(L)),b(),E(),g="",h())}j.addEventListener("submit",(function(e){if(e.preventDefault(),S)L[g].projectTitle=j.querySelector(".project-form-input").value,S=!1,localStorage.setItem("projects_by_baha",JSON.stringify(L)),E(),a();else{const e=function(e){console.log("factory called");return{projectTitle:e,id:L.length,tasks:[]}}(document.querySelector(".project-form-input").value);L.push(e),localStorage.setItem("projects_by_baha",JSON.stringify(L)),E(),a(),document.querySelector(".tasks").innerHTML=""}})),document.querySelectorAll(".delete-button").forEach((e=>e.addEventListener("click",q)));const L=JSON.parse(localStorage.getItem("projects_by_baha"))||[];function E(){const e=L.map((e=>`\n        <div class="project" data-id=${e.id}>\n            <div class="project-title">${e.projectTitle}</div>\n            <img class="menu-icon edit-button" src="../src/images/edit.png" alt="edit">\n            <img class="menu-icon delete-button" src="../src/images/delete.png" alt="delete">\n        </div>\n        `)).join("");document.querySelector(".projects").innerHTML="",document.querySelector(".projects").innerHTML=e,document.querySelectorAll(".project .delete-button").forEach((e=>e.addEventListener("click",q))),b(),document.querySelectorAll(".project").forEach((e=>e.addEventListener("click",(e=>{!function(e){document.querySelectorAll(".project").forEach((e=>e.classList.remove("active"))),y.forEach((e=>e.classList.remove("active"))),e.currentTarget.classList.add("active")}(e),document.querySelector(".add-task").classList.remove("hidden"),function(e){document.querySelector(".content-title").textContent=e.currentTarget.textContent}(e),function(e){g=e.currentTarget.dataset.id,console.log("selected project is "+g)}(e),p()})))),function(){function e(e){o(),S=!0,j.querySelector(".project-form-input").value=e.target.parentNode.textContent}document.querySelectorAll(".edit-button").forEach((t=>t.addEventListener("click",e)))}()}const N=document.querySelector(".task-form"),T=document.querySelector(".add-task");function $(){N.classList.add("hidden"),T.classList.remove("hidden"),N.reset()}T.addEventListener("click",(function(){console.log("new task will be added to project: "+g),console.log(L[g]),N.classList.remove("hidden"),T.classList.add("hidden")})),document.querySelector(".task-form-button.cancel").addEventListener("click",$),N.addEventListener("submit",(function(e){e.preventDefault();const t=function(e,t,n){return{id:L[g].tasks.length,done:!1,title:e,detail:t,due:n,importance:!1,projectID:L[g].id}}(document.querySelector(".task-form #task-title").value,document.querySelector(".task-form #task-details").value,document.querySelector(".task-form #task-due-date").value);L[g].tasks.push(t),console.log(L[g].tasks),$(),localStorage.setItem("projects_by_baha",JSON.stringify(L)),p()})),E(),v()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,