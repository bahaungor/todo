(()=>{"use strict";const e=document.querySelector(".sidebar"),t=document.querySelector(".side-menu-opener"),n=document.querySelector(".main");let c=!0;function o(){h.style.display="flex"}function a(){document.querySelector(".project-form-input").value="",h.style.display="none"}function s(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function i(e){s(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function r(){document.querySelectorAll(".task-container #task-done").forEach((e=>e.addEventListener("change",l))),document.querySelectorAll(".task-container #task-importance").forEach((e=>e.addEventListener("change",d)))}function d(){this.checked?(j[this.parentNode.dataset.project].tasks[this.parentNode.dataset.id].importance=!0,localStorage.setItem("projects_by_baha",JSON.stringify(j))):(j[this.parentNode.dataset.project].tasks[this.parentNode.dataset.id].importance=!1,localStorage.setItem("projects_by_baha",JSON.stringify(j)))}function l(){this.checked?(j[this.parentNode.dataset.project].tasks[this.parentNode.dataset.id].done=!0,localStorage.setItem("projects_by_baha",JSON.stringify(j))):(j[this.parentNode.dataset.project].tasks[this.parentNode.dataset.id].done=!1,localStorage.setItem("projects_by_baha",JSON.stringify(j)))}t.addEventListener("click",(function(){c?(e.style.display="none",n.style.gridTemplateColumns="1fr",c=!1):(e.style.display="block",n.style.gridTemplateColumns="350px 1fr",c=!0)})),document.querySelector(".add-button").addEventListener("click",o),document.querySelector(".project-form-button.cancel").addEventListener("click",a);const u=document.querySelectorAll(".sidebar-item"),m=document.querySelector(".content-title");function p(){const e=j.map((e=>e.tasks.map((e=>`\n            <div class="task-container" data-id="${e.id}" data-project="${e.projectID}">\n                <input type="checkbox" id="task-done" ${e.done?"checked":""}>\n                <div class="task-title">${e.title}</div>\n                <div class="due-date">${e.due}</div>\n                <input type="checkbox" id="task-importance" ${e.importance?"checked":""}>\n                <div class="task-details">${e.detail}</div>\n                <img class="menu-icon delete-button" src="../src/images/delete.png">\n            </div>`)).join(""))).join("");document.querySelector(".tasks").innerHTML="",document.querySelector(".tasks").innerHTML=e,r()}function k(){const e=j.map((e=>e.tasks.map((e=>{if(0==function(e,t){s(2,arguments);var n=i(e),c=i(t),o=n.getTime()-c.getTime();return o<0?-1:o>0?1:o}(Date.parse(e.due),Date.parse((new Date).toISOString().split("T")[0])))return`\n                <div class="task-container" data-id="${e.id}">\n                    <input type="checkbox" id="task-done" ${e.done?"checked":""}>\n                    <div class="task-title">${e.title}</div>\n                    <div class="due-date">${e.due}</div>\n                    <input type="checkbox" id="task-importance" ${e.importance?"checked":""}>\n                    <div class="task-details">${e.detail}</div>\n                    <img class="menu-icon delete-button" src="../src/images/delete.png">\n                </div>`})).join(""))).join("");document.querySelector(".tasks").innerHTML="",document.querySelector(".tasks").innerHTML=e}u.forEach((e=>e.addEventListener("click",(e=>{!function(e){u.forEach((e=>e.classList.remove("active"))),document.querySelectorAll(".project").forEach((e=>e.classList.remove("active"))),e.target.classList.add("active")}(e),function(e){m.textContent="",m.textContent=e.target.textContent,document.querySelector(".add-task").classList.add("hidden")}(e)})))),document.querySelector(".sidebar-item.all-tasks").addEventListener("click",p),document.querySelector(".sidebar-item.today").addEventListener("click",k),document.querySelector(".sidebar-item.important").addEventListener("click",(function(){const e=j.map((e=>e.tasks.map((e=>{if(1==e.importance)return`\n                <div class="task-container" data-id="${e.id}">\n                    <input type="checkbox" id="task-done" ${e.done?"checked":""}>\n                    <div class="task-title">${e.title}</div>\n                    <div class="due-date">${e.due}</div>\n                    <input type="checkbox" id="task-importance" ${e.importance?"checked":""}>\n                    <div class="task-details">${e.detail}</div>\n                    <img class="menu-icon delete-button" src="../src/images/delete.png">\n                </div>`})).join(""))).join("");document.querySelector(".tasks").innerHTML="",document.querySelector(".tasks").innerHTML=e}));const y=document.querySelector(".tasks");function f(){if(console.log(j),0==j[v--].tasks.length||""==v)y.innerHTML="",y.textContent="Yayyyy! No Tasks!";else{const e=j[v].tasks.map((e=>`\n            <div class="task-container" data-id="${e.id}" data-project="${e.projectID}">\n                <input type="checkbox" id="task-done" ${e.done?"checked":""}>\n                <div class="task-title">${e.title}</div>\n                <div class="due-date">${e.due}</div>\n                <input type="checkbox" id="task-importance" ${e.importance?"checked":""}>\n                <div class="task-details">${e.detail}</div>\n                <img class="menu-icon delete-button" src="../src/images/delete.png">\n            </div>`)).join("");y.innerHTML="",y.innerHTML=e,r()}}let v="";let g=!1;const h=document.querySelector(".project-form");function S(){let e=0;j.forEach((t=>{t.id=e,e++}))}function b(e){confirm("Are you sure you want to delete "+j[e.currentTarget.parentNode.dataset.id].projectTitle+" & tasks inside it?")&&(j.splice(e.currentTarget.parentNode.dataset.id,1),localStorage.setItem("projects_by_baha",JSON.stringify(j)),S(),q(),v="",k())}h.addEventListener("submit",(function(e){if(e.preventDefault(),g)j[v].projectTitle=h.querySelector(".project-form-input").value,g=!1,localStorage.setItem("projects_by_baha",JSON.stringify(j)),q(),a();else{const e=function(e){console.log("factory called");return{projectTitle:e,id:j.length,tasks:[]}}(document.querySelector(".project-form-input").value);j.push(e),localStorage.setItem("projects_by_baha",JSON.stringify(j)),q(),a(),document.querySelector(".tasks").innerHTML=""}})),document.querySelectorAll(".delete-button").forEach((e=>e.addEventListener("click",b)));const j=JSON.parse(localStorage.getItem("projects_by_baha"))||[];function q(){const e=j.map((e=>`\n        <div class="project" data-id=${e.id}>\n            <div class="project-title">${e.projectTitle}</div>\n            <img class="menu-icon edit-button" src="../src/images/edit.png" alt="edit">\n            <img class="menu-icon delete-button" src="../src/images/delete.png" alt="delete">\n        </div>\n        `)).join("");document.querySelector(".projects").innerHTML="",document.querySelector(".projects").innerHTML=e,document.querySelectorAll(".project .delete-button").forEach((e=>e.addEventListener("click",b))),S(),document.querySelectorAll(".project").forEach((e=>e.addEventListener("click",(e=>{!function(e){document.querySelectorAll(".project").forEach((e=>e.classList.remove("active"))),u.forEach((e=>e.classList.remove("active"))),e.currentTarget.classList.add("active")}(e),document.querySelector(".add-task").classList.remove("hidden"),function(e){document.querySelector(".content-title").textContent=e.currentTarget.textContent}(e),function(e){v=e.currentTarget.dataset.id,console.log("selected project is "+v)}(e),f()})))),function(){function e(e){o(),g=!0,h.querySelector(".project-form-input").value=e.target.parentNode.textContent}document.querySelectorAll(".edit-button").forEach((t=>t.addEventListener("click",e)))}()}const L=document.querySelector(".task-form"),E=document.querySelector(".add-task");function T(){L.classList.add("hidden"),E.classList.remove("hidden"),L.reset()}E.addEventListener("click",(function(){console.log("new task will be added to project: "+v),console.log(j[v]),L.classList.remove("hidden"),E.classList.add("hidden")})),document.querySelector(".task-form-button.cancel").addEventListener("click",T),L.addEventListener("submit",(function(e){e.preventDefault();const t=function(e,t,n){return{id:j[v].tasks.length,done:!1,title:e,detail:t,due:n,importance:!1,projectID:j[v].id}}(document.querySelector(".task-form #task-title").value,document.querySelector(".task-form #task-details").value,document.querySelector(".task-form #task-due-date").value);j[v].tasks.push(t),console.log(j[v].tasks),T(),localStorage.setItem("projects_by_baha",JSON.stringify(j)),f()})),q(),p()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QyxFQUFTZ0QsSUFDckJvQixFQUFTN0IsVUFBVUMsT0FBTyxVQUMxQjZCLEVBQWM5QixVQUFVRyxJQUFJLGFBR04vRSxTQUFTQyxjQUFjLDRCQUMvQitCLGlCQUFpQixRQUFTMkUsR0FPNUNGLEVBQVN6RSxpQkFBaUIsVUFDMUIsU0FBb0IyQyxHQUNoQkEsRUFBRW9CLGlCQUNGLE1BR01jLEVBUVYsU0FBeUJsRCxFQUFPRSxFQUFRRCxHQUtwQyxNQUFPLENBQUNsQixHQUZHTCxFQUFTZ0QsR0FBaUI1QyxNQUFNOUIsT0FFL0JxQyxNQUpDLEVBSUtXLE1BQUFBLEVBQU9FLE9BQUFBLEVBQVFELElBQUFBLEVBQUtqQixZQUhuQixFQUcrQmUsVUFEaENyQixFQUFTZ0QsR0FBaUIzQyxJQVo1Qm9FLENBSEY5RyxTQUFTQyxjQUFjLDBCQUEwQk0sTUFDaERQLFNBQVNDLGNBQWMsNEJBQTRCTSxNQUN0RFAsU0FBU0MsY0FBYyw2QkFBNkJNLE9BRWhFOEIsRUFBU2dELEdBQWlCNUMsTUFBTXlELEtBQUtXLEdBQ3JDdEYsUUFBUTZELElBQUkvQyxFQUFTZ0QsR0FBaUI1QyxPQUN0Q2tFLElBQ0EvRCxhQUFhQyxRQUFRLG1CQUFvQkMsS0FBS0MsVUFBVVYsSUFDeEQ4QyxPQzNCSlcsSUFDQXhDLEsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8xNS4tdG9kby1saXN0Ly4vc3JjL3NpZGViYXJPcGVuZXIuanMiLCJ3ZWJwYWNrOi8vMTUuLXRvZG8tbGlzdC8uL3NyYy9wcm9qZWN0Rm9ybU9wZW5lckNsb3Nlci5qcyIsIndlYnBhY2s6Ly8xNS4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyIsIndlYnBhY2s6Ly8xNS4tdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS90b0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vMTUuLXRvZG8tbGlzdC8uL3NyYy90YXNrVXBkYXRlci5qcyIsIndlYnBhY2s6Ly8xNS4tdG9kby1saXN0Ly4vc3JjL2hvbWVCdXR0b25zRnVuY3Rpb25zLmpzIiwid2VicGFjazovLzE1Li10b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2NvbXBhcmVBc2MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vMTUuLXRvZG8tbGlzdC8uL3NyYy90YXNrTG9hZGVyLmpzIiwid2VicGFjazovLzE1Li10b2RvLWxpc3QvLi9zcmMvc2lkZWJhclByb2plY3RMaXN0RnVuY3Rpb25hbGl0eS5qcyIsIndlYnBhY2s6Ly8xNS4tdG9kby1saXN0Ly4vc3JjL2FkZFVwZGF0ZVByb2plY3QuanMiLCJ3ZWJwYWNrOi8vMTUuLXRvZG8tbGlzdC8uL3NyYy9kZWxldGVQcm9qZWN0LmpzIiwid2VicGFjazovLzE1Li10b2RvLWxpc3QvLi9zcmMvcHJvamVjdExvYWRlci5qcyIsIndlYnBhY2s6Ly8xNS4tdG9kby1saXN0Ly4vc3JjL3NpZGViYXJQcm9qZWN0RWRpdHMuanMiLCJ3ZWJwYWNrOi8vMTUuLXRvZG8tbGlzdC8uL3NyYy90YXNrQ3JlYXRvci5qcyIsIndlYnBhY2s6Ly8xNS4tdG9kby1saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHNpZGViYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNpZGViYXJcIik7XHJcbmNvbnN0IHNpZGViYXJPcGVuZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNpZGUtbWVudS1vcGVuZXJcIik7XHJcbmNvbnN0IG1haW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1haW5cIik7XHJcbmxldCBzaWRlYmFyU2hvd24gPSB0cnVlO1xyXG5zaWRlYmFyT3BlbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0b2dnbGVTaWRlYmFyKTtcclxuZnVuY3Rpb24gdG9nZ2xlU2lkZWJhcigpe1xyXG4gICAgaWYoc2lkZWJhclNob3duKXtcclxuICAgICAgICBzaWRlYmFyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICBtYWluLnN0eWxlLmdyaWRUZW1wbGF0ZUNvbHVtbnMgPSBcIjFmclwiO1xyXG4gICAgICAgIHNpZGViYXJTaG93biA9IGZhbHNlO1xyXG4gICAgfSBlbHNle1xyXG4gICAgICAgIHNpZGViYXIuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgICAgICBtYWluLnN0eWxlLmdyaWRUZW1wbGF0ZUNvbHVtbnMgPSBcIjM1MHB4IDFmclwiO1xyXG4gICAgICAgIHNpZGViYXJTaG93biA9IHRydWU7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7c2lkZWJhck9wZW5lcn0iLCJpbXBvcnQge2Zvcm19IGZyb20gXCIuL2FkZFVwZGF0ZVByb2plY3RcIlxyXG5cclxuY29uc3QgYWRkUHJvamVjdEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkLWJ1dHRvblwiKTtcclxuYWRkUHJvamVjdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgb3BlblByb2plY3RGb3JtKTtcclxuZnVuY3Rpb24gb3BlblByb2plY3RGb3JtKCl7XHJcbiAgICBmb3JtLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcclxufVxyXG5cclxuY29uc3QgY2FuY2VsQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9qZWN0LWZvcm0tYnV0dG9uLmNhbmNlbFwiKTtcclxuY2FuY2VsQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjbG9zZVByb2plY3RGb3JtKTtcclxuZnVuY3Rpb24gY2xvc2VQcm9qZWN0Rm9ybSgpe1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9qZWN0LWZvcm0taW5wdXRcIikudmFsdWUgPSBcIlwiO1xyXG4gICAgZm9ybS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbn1cclxuXHJcbmV4cG9ydCB7Y2xvc2VQcm9qZWN0Rm9ybSwgb3BlblByb2plY3RGb3JtfSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlcXVpcmVkQXJncyhyZXF1aXJlZCwgYXJncykge1xuICBpZiAoYXJncy5sZW5ndGggPCByZXF1aXJlZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocmVxdWlyZWQgKyAnIGFyZ3VtZW50JyArIChyZXF1aXJlZCA+IDEgPyAncycgOiAnJykgKyAnIHJlcXVpcmVkLCBidXQgb25seSAnICsgYXJncy5sZW5ndGggKyAnIHByZXNlbnQnKTtcbiAgfVxufSIsImltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHRvRGF0ZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgaXRzIGNsb25lLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhIG51bWJlciwgaXQgaXMgdHJlYXRlZCBhcyBhIHRpbWVzdGFtcC5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgbm9uZSBvZiB0aGUgYWJvdmUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIEludmFsaWQgRGF0ZS5cbiAqXG4gKiAqKk5vdGUqKjogKmFsbCogRGF0ZSBhcmd1bWVudHMgcGFzc2VkIHRvIGFueSAqZGF0ZS1mbnMqIGZ1bmN0aW9uIGlzIHByb2Nlc3NlZCBieSBgdG9EYXRlYC5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBhcmd1bWVudCAtIHRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDbG9uZSB0aGUgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZShuZXcgRGF0ZSgyMDE0LCAxLCAxMSwgMTEsIDMwLCAzMCkpXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHRoZSB0aW1lc3RhbXAgdG8gZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZSgxMzkyMDk4NDMwMDAwKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0RhdGUoYXJndW1lbnQpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBhcmdTdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnQpOyAvLyBDbG9uZSB0aGUgZGF0ZVxuXG4gIGlmIChhcmd1bWVudCBpbnN0YW5jZW9mIERhdGUgfHwgdHlwZW9mIGFyZ3VtZW50ID09PSAnb2JqZWN0JyAmJiBhcmdTdHIgPT09ICdbb2JqZWN0IERhdGVdJykge1xuICAgIC8vIFByZXZlbnQgdGhlIGRhdGUgdG8gbG9zZSB0aGUgbWlsbGlzZWNvbmRzIHdoZW4gcGFzc2VkIHRvIG5ldyBEYXRlKCkgaW4gSUUxMFxuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudC5nZXRUaW1lKCkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBhcmd1bWVudCA9PT0gJ251bWJlcicgfHwgYXJnU3RyID09PSAnW29iamVjdCBOdW1iZXJdJykge1xuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCh0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgU3RyaW5nXScpICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcIlN0YXJ0aW5nIHdpdGggdjIuMC4wLWJldGEuMSBkYXRlLWZucyBkb2Vzbid0IGFjY2VwdCBzdHJpbmdzIGFzIGRhdGUgYXJndW1lbnRzLiBQbGVhc2UgdXNlIGBwYXJzZUlTT2AgdG8gcGFyc2Ugc3RyaW5ncy4gU2VlOiBodHRwczovL2dpdC5pby9manVsZVwiKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcblxuICAgICAgY29uc29sZS53YXJuKG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxufSIsImltcG9ydCB7IHByb2plY3RzIH0gZnJvbSBcIi4vcHJvamVjdExvYWRlclwiO1xyXG5pbXBvcnQgeyBzZWxlY3RlZFByb2plY3QgfSBmcm9tIFwiLi9zaWRlYmFyUHJvamVjdExpc3RGdW5jdGlvbmFsaXR5XCI7XHJcblxyXG5mdW5jdGlvbiBhZGRGdW5jdGlvbmFsaXR5VG9UYXNrcygpe1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi50YXNrLWNvbnRhaW5lciAjdGFzay1kb25lXCIpLmZvckVhY2goYSA9PiBcclxuICAgICAgICBhLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgY29tcGxldGVUYXNrKSk7XHJcbiAgICBcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIudGFzay1jb250YWluZXIgI3Rhc2staW1wb3J0YW5jZVwiKS5mb3JFYWNoKGEgPT4gXHJcbiAgICAgICAgYS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGZhdm9yaXRlVGFzaykpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmYXZvcml0ZVRhc2soKXtcclxuICAgIGlmICh0aGlzLmNoZWNrZWQpe1xyXG4gICAgICAgIHByb2plY3RzW3RoaXMucGFyZW50Tm9kZS5kYXRhc2V0LnByb2plY3RdLnRhc2tzW3RoaXMucGFyZW50Tm9kZS5kYXRhc2V0LmlkXS5pbXBvcnRhbmNlID0gdHJ1ZTtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInByb2plY3RzX2J5X2JhaGFcIiwgSlNPTi5zdHJpbmdpZnkocHJvamVjdHMpKTtcclxuICAgIH0gZWxzZXtcclxuICAgICAgICBwcm9qZWN0c1t0aGlzLnBhcmVudE5vZGUuZGF0YXNldC5wcm9qZWN0XS50YXNrc1t0aGlzLnBhcmVudE5vZGUuZGF0YXNldC5pZF0uaW1wb3J0YW5jZSA9IGZhbHNlO1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwicHJvamVjdHNfYnlfYmFoYVwiLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0cykpO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjb21wbGV0ZVRhc2soKXtcclxuICAgIGlmICh0aGlzLmNoZWNrZWQpe1xyXG4gICAgICAgIHByb2plY3RzW3RoaXMucGFyZW50Tm9kZS5kYXRhc2V0LnByb2plY3RdLnRhc2tzW3RoaXMucGFyZW50Tm9kZS5kYXRhc2V0LmlkXS5kb25lID0gdHJ1ZTtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInByb2plY3RzX2J5X2JhaGFcIiwgSlNPTi5zdHJpbmdpZnkocHJvamVjdHMpKTtcclxuICAgIH0gZWxzZXtcclxuICAgICAgICBwcm9qZWN0c1t0aGlzLnBhcmVudE5vZGUuZGF0YXNldC5wcm9qZWN0XS50YXNrc1t0aGlzLnBhcmVudE5vZGUuZGF0YXNldC5pZF0uZG9uZSA9IGZhbHNlO1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwicHJvamVjdHNfYnlfYmFoYVwiLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0cykpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQge2FkZEZ1bmN0aW9uYWxpdHlUb1Rhc2tzfSIsImltcG9ydCB7IHByb2plY3RzIH0gZnJvbSBcIi4vcHJvamVjdExvYWRlclwiO1xyXG5pbXBvcnQge2NvbXBhcmVBc2MsIHRvRGF0ZX0gZnJvbSBcImRhdGUtZm5zXCI7XHJcbmltcG9ydCB7IGFkZEZ1bmN0aW9uYWxpdHlUb1Rhc2tzIH0gZnJvbSBcIi4vdGFza1VwZGF0ZXJcIjtcclxuXHJcbmNvbnN0IG1lbnVidXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5zaWRlYmFyLWl0ZW1cIik7XHJcbmNvbnN0IGNvbnRlbnRUaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY29udGVudC10aXRsZVwiKTtcclxuXHJcblxyXG5tZW51YnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XHJcbiAgICBzZWxlY3RCdXR0b24oZSk7XHJcbiAgICB1cGRhdGVDb250ZW50VGl0bGUoZSk7XHJcbn0pKTtcclxuZnVuY3Rpb24gc2VsZWN0QnV0dG9uKGUpe1xyXG4gICAgbWVudWJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT4gYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIikpO1xyXG4gICAgY29uc3Qgc2lkZWJhclByb2plY3RzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wcm9qZWN0XCIpO1xyXG4gICAgc2lkZWJhclByb2plY3RzLmZvckVhY2gocHJvamVjdCA9PiBwcm9qZWN0LmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIikpO1xyXG4gICAgZS50YXJnZXQuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcclxufVxyXG5mdW5jdGlvbiB1cGRhdGVDb250ZW50VGl0bGUoZSl7XHJcbiAgICBjb250ZW50VGl0bGUudGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gICAgY29udGVudFRpdGxlLnRleHRDb250ZW50ID0gZS50YXJnZXQudGV4dENvbnRlbnQ7XHJcbiAgICBjb25zdCBhZGRUYXNrQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hZGQtdGFza1wiKTtcclxuICAgIGFkZFRhc2tCdXR0b24uY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcclxufVxyXG5cclxuY29uc3QgYWxsVGFza3NCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNpZGViYXItaXRlbS5hbGwtdGFza3NcIik7XHJcbmFsbFRhc2tzQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBsaXN0QWxsVGFza3MpO1xyXG5mdW5jdGlvbiBsaXN0QWxsVGFza3MoKXtcclxuICAgIGNvbnN0IGh0bWwgPSBwcm9qZWN0cy5tYXAocHJvamVjdCA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHByb2plY3QudGFza3MubWFwKHRhc2sgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gYFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFzay1jb250YWluZXJcIiBkYXRhLWlkPVwiJHt0YXNrLmlkfVwiIGRhdGEtcHJvamVjdD1cIiR7dGFzay5wcm9qZWN0SUR9XCI+XHJcbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgaWQ9XCJ0YXNrLWRvbmVcIiAkeyh0YXNrLmRvbmUpID8gXCJjaGVja2VkXCI6IFwiXCJ9PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhc2stdGl0bGVcIj4ke3Rhc2sudGl0bGV9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZHVlLWRhdGVcIj4ke3Rhc2suZHVlfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGlkPVwidGFzay1pbXBvcnRhbmNlXCIgJHsodGFzay5pbXBvcnRhbmNlKSA/IFwiY2hlY2tlZFwiOiBcIlwifT5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YXNrLWRldGFpbHNcIj4ke3Rhc2suZGV0YWlsfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGltZyBjbGFzcz1cIm1lbnUtaWNvbiBkZWxldGUtYnV0dG9uXCIgc3JjPVwiLi4vc3JjL2ltYWdlcy9kZWxldGUucG5nXCI+XHJcbiAgICAgICAgICAgIDwvZGl2PmBcclxuICAgICAgICB9KS5qb2luKFwiXCIpO1xyXG4gICAgfSkuam9pbihcIlwiKTtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGFza3NcIikuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGFza3NcIikuaW5uZXJIVE1MID0gaHRtbDtcclxuICAgIGFkZEZ1bmN0aW9uYWxpdHlUb1Rhc2tzKCk7XHJcbn1cclxuXHJcbmNvbnN0IHRvZGF5QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zaWRlYmFyLWl0ZW0udG9kYXlcIik7XHJcbnRvZGF5QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBsaXN0VG9kYXlzVGFza3MpO1xyXG5mdW5jdGlvbiBsaXN0VG9kYXlzVGFza3MoKXtcclxuICAgIGNvbnN0IGh0bWwgPSBwcm9qZWN0cy5tYXAocHJvamVjdCA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHByb2plY3QudGFza3MubWFwKHRhc2sgPT4ge1xyXG4gICAgICAgICAgICBpZihjb21wYXJlQXNjKERhdGUucGFyc2UodGFzay5kdWUpLCBEYXRlLnBhcnNlKG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdKSkgPT0gMCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYFxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhc2stY29udGFpbmVyXCIgZGF0YS1pZD1cIiR7dGFzay5pZH1cIj5cclxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgaWQ9XCJ0YXNrLWRvbmVcIiAkeyh0YXNrLmRvbmUpID8gXCJjaGVja2VkXCI6IFwiXCJ9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YXNrLXRpdGxlXCI+JHt0YXNrLnRpdGxlfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkdWUtZGF0ZVwiPiR7dGFzay5kdWV9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGlkPVwidGFzay1pbXBvcnRhbmNlXCIgJHsodGFzay5pbXBvcnRhbmNlKSA/IFwiY2hlY2tlZFwiOiBcIlwifT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFzay1kZXRhaWxzXCI+JHt0YXNrLmRldGFpbH08L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPVwibWVudS1pY29uIGRlbGV0ZS1idXR0b25cIiBzcmM9XCIuLi9zcmMvaW1hZ2VzL2RlbGV0ZS5wbmdcIj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PmBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLmpvaW4oXCJcIik7XHJcbiAgICB9KS5qb2luKFwiXCIpO1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50YXNrc1wiKS5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50YXNrc1wiKS5pbm5lckhUTUwgPSBodG1sO1xyXG59XHJcblxyXG5jb25zdCBpbXBvcnRhbnRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNpZGViYXItaXRlbS5pbXBvcnRhbnRcIik7XHJcbmltcG9ydGFudEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgbGlzdEltcG9ydGFudFRhc2tzKTtcclxuZnVuY3Rpb24gbGlzdEltcG9ydGFudFRhc2tzKCl7XHJcbiAgICBjb25zdCBodG1sID0gcHJvamVjdHMubWFwKHByb2plY3QgPT4ge1xyXG4gICAgICAgIHJldHVybiBwcm9qZWN0LnRhc2tzLm1hcCh0YXNrID0+IHtcclxuICAgICAgICAgICAgaWYodGFzay5pbXBvcnRhbmNlID09IHRydWUpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGBcclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YXNrLWNvbnRhaW5lclwiIGRhdGEtaWQ9XCIke3Rhc2suaWR9XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGlkPVwidGFzay1kb25lXCIgJHsodGFzay5kb25lKSA/IFwiY2hlY2tlZFwiOiBcIlwifT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFzay10aXRsZVwiPiR7dGFzay50aXRsZX08L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZHVlLWRhdGVcIj4ke3Rhc2suZHVlfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBpZD1cInRhc2staW1wb3J0YW5jZVwiICR7KHRhc2suaW1wb3J0YW5jZSkgPyBcImNoZWNrZWRcIjogXCJcIn0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhc2stZGV0YWlsc1wiPiR7dGFzay5kZXRhaWx9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz1cIm1lbnUtaWNvbiBkZWxldGUtYnV0dG9uXCIgc3JjPVwiLi4vc3JjL2ltYWdlcy9kZWxldGUucG5nXCI+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5gXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KS5qb2luKFwiXCIpO1xyXG4gICAgfSkuam9pbihcIlwiKTtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGFza3NcIikuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGFza3NcIikuaW5uZXJIVE1MID0gaHRtbDtcclxufVxyXG5cclxuZXhwb3J0IHttZW51YnV0dG9ucywgbGlzdEFsbFRhc2tzLCBsaXN0VG9kYXlzVGFza3N9IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBjb21wYXJlQXNjXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbXBhcmUgdGhlIHR3byBkYXRlcyBhbmQgcmV0dXJuIC0xLCAwIG9yIDEuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb21wYXJlIHRoZSB0d28gZGF0ZXMgYW5kIHJldHVybiAxIGlmIHRoZSBmaXJzdCBkYXRlIGlzIGFmdGVyIHRoZSBzZWNvbmQsXG4gKiAtMSBpZiB0aGUgZmlyc3QgZGF0ZSBpcyBiZWZvcmUgdGhlIHNlY29uZCBvciAwIGlmIGRhdGVzIGFyZSBlcXVhbC5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVMZWZ0IC0gdGhlIGZpcnN0IGRhdGUgdG8gY29tcGFyZVxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZVJpZ2h0IC0gdGhlIHNlY29uZCBkYXRlIHRvIGNvbXBhcmVcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHRoZSByZXN1bHQgb2YgdGhlIGNvbXBhcmlzb25cbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29tcGFyZSAxMSBGZWJydWFyeSAxOTg3IGFuZCAxMCBKdWx5IDE5ODk6XG4gKiBjb25zdCByZXN1bHQgPSBjb21wYXJlQXNjKG5ldyBEYXRlKDE5ODcsIDEsIDExKSwgbmV3IERhdGUoMTk4OSwgNiwgMTApKVxuICogLy89PiAtMVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBTb3J0IHRoZSBhcnJheSBvZiBkYXRlczpcbiAqIGNvbnN0IHJlc3VsdCA9IFtcbiAqICAgbmV3IERhdGUoMTk5NSwgNiwgMiksXG4gKiAgIG5ldyBEYXRlKDE5ODcsIDEsIDExKSxcbiAqICAgbmV3IERhdGUoMTk4OSwgNiwgMTApXG4gKiBdLnNvcnQoY29tcGFyZUFzYylcbiAqIC8vPT4gW1xuICogLy8gICBXZWQgRmViIDExIDE5ODcgMDA6MDA6MDAsXG4gKiAvLyAgIE1vbiBKdWwgMTAgMTk4OSAwMDowMDowMCxcbiAqIC8vICAgU3VuIEp1bCAwMiAxOTk1IDAwOjAwOjAwXG4gKiAvLyBdXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcGFyZUFzYyhkaXJ0eURhdGVMZWZ0LCBkaXJ0eURhdGVSaWdodCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGVMZWZ0ID0gdG9EYXRlKGRpcnR5RGF0ZUxlZnQpO1xuICB2YXIgZGF0ZVJpZ2h0ID0gdG9EYXRlKGRpcnR5RGF0ZVJpZ2h0KTtcbiAgdmFyIGRpZmYgPSBkYXRlTGVmdC5nZXRUaW1lKCkgLSBkYXRlUmlnaHQuZ2V0VGltZSgpO1xuXG4gIGlmIChkaWZmIDwgMCkge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIGlmIChkaWZmID4gMCkge1xuICAgIHJldHVybiAxOyAvLyBSZXR1cm4gMCBpZiBkaWZmIGlzIDA7IHJldHVybiBOYU4gaWYgZGlmZiBpcyBOYU5cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZGlmZjtcbiAgfVxufSIsImltcG9ydCB7IHByb2plY3RzIH0gZnJvbSBcIi4vcHJvamVjdExvYWRlclwiO1xyXG5pbXBvcnQgeyBzZWxlY3RlZFByb2plY3QgfSBmcm9tIFwiLi9zaWRlYmFyUHJvamVjdExpc3RGdW5jdGlvbmFsaXR5XCI7XHJcbmltcG9ydCB7YWRkRnVuY3Rpb25hbGl0eVRvVGFza3N9IGZyb20gXCIuL3Rhc2tVcGRhdGVyXCJcclxuXHJcbmNvbnN0IHRhc2tzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50YXNrc1wiKTtcclxuXHJcbmZ1bmN0aW9uIGxvYWRQcm9qZWN0c1Rhc2tzKCl7XHJcbiAgICBjb25zb2xlLmxvZyhwcm9qZWN0cyk7XHJcbiAgICBpZihwcm9qZWN0c1tzZWxlY3RlZFByb2plY3QtLV0udGFza3MubGVuZ3RoID09IDAgfHwgc2VsZWN0ZWRQcm9qZWN0ID09IFwiXCIpe1xyXG4gICAgICAgIHRhc2tzLmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICAgICAgdGFza3MudGV4dENvbnRlbnQgPSBcIllheXl5eSEgTm8gVGFza3MhXCI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IGh0bWwgPSBwcm9qZWN0c1tzZWxlY3RlZFByb2plY3RdLnRhc2tzLm1hcCh0YXNrID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGBcclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhc2stY29udGFpbmVyXCIgZGF0YS1pZD1cIiR7dGFzay5pZH1cIiBkYXRhLXByb2plY3Q9XCIke3Rhc2sucHJvamVjdElEfVwiPlxyXG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGlkPVwidGFzay1kb25lXCIgJHsodGFzay5kb25lKSA/IFwiY2hlY2tlZFwiOiBcIlwifT5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YXNrLXRpdGxlXCI+JHt0YXNrLnRpdGxlfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImR1ZS1kYXRlXCI+JHt0YXNrLmR1ZX08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBpZD1cInRhc2staW1wb3J0YW5jZVwiICR7KHRhc2suaW1wb3J0YW5jZSkgPyBcImNoZWNrZWRcIjogXCJcIn0+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFzay1kZXRhaWxzXCI+JHt0YXNrLmRldGFpbH08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9XCJtZW51LWljb24gZGVsZXRlLWJ1dHRvblwiIHNyYz1cIi4uL3NyYy9pbWFnZXMvZGVsZXRlLnBuZ1wiPlxyXG4gICAgICAgICAgICA8L2Rpdj5gXHJcbiAgICAgICAgfSkuam9pbihcIlwiKTtcclxuICAgICAgICB0YXNrcy5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgICAgIHRhc2tzLmlubmVySFRNTCA9IGh0bWw7XHJcbiAgICAgICAgYWRkRnVuY3Rpb25hbGl0eVRvVGFza3MoKTtcclxuICAgIH1cclxuICAgIFxyXG59XHJcblxyXG5leHBvcnQge2xvYWRQcm9qZWN0c1Rhc2tzfSIsImltcG9ydCB7IG1lbnVidXR0b25zIH0gZnJvbSBcIi4vaG9tZUJ1dHRvbnNGdW5jdGlvbnNcIjtcclxuaW1wb3J0IHsgbG9hZFByb2plY3RzVGFza3MgfSBmcm9tIFwiLi90YXNrTG9hZGVyXCI7XHJcblxyXG5sZXQgc2VsZWN0ZWRQcm9qZWN0ID0gXCJcIjtcclxuZnVuY3Rpb24gc2lkZWJhclByb2plY3RGdW5jdGlvbmFsaXR5KCl7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnByb2plY3RcIikuZm9yRWFjaChwcm9qZWN0ID0+IHByb2plY3QuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XHJcbiAgICAgICAgaGlnaGxpZ2h0UHJvamVjdChlKTtcclxuICAgICAgICBkaXNwbGF5UHJvamVjdFRhc2tzKGUpO1xyXG4gICAgICAgIHVwZGF0ZUNvbnRlbnRUaXRsZShlKTtcclxuICAgICAgICB1cGRhdGVTZWxlY3RlZFByb2plY3QoZSk7XHJcbiAgICAgICAgbG9hZFByb2plY3RzVGFza3MoKTtcclxuICAgIH0pKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGlnaGxpZ2h0UHJvamVjdChlKXtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucHJvamVjdFwiKS5mb3JFYWNoKHByb2plY3QgPT4gcHJvamVjdC5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpKTtcclxuICAgIG1lbnVidXR0b25zLmZvckVhY2goYnV0dG9uID0+IGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpKTtcclxuICAgIGUuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG59XHJcbmZ1bmN0aW9uIGRpc3BsYXlQcm9qZWN0VGFza3MoZSl7XHJcbiAgICBjb25zdCBhZGRUYXNrQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hZGQtdGFza1wiKTtcclxuICAgIGFkZFRhc2tCdXR0b24uY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcclxufVxyXG5mdW5jdGlvbiB1cGRhdGVDb250ZW50VGl0bGUoZSl7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNvbnRlbnQtdGl0bGVcIikudGV4dENvbnRlbnQgPSBlLmN1cnJlbnRUYXJnZXQudGV4dENvbnRlbnQ7XHJcbn1cclxuZnVuY3Rpb24gdXBkYXRlU2VsZWN0ZWRQcm9qZWN0KGUpe1xyXG4gICAgc2VsZWN0ZWRQcm9qZWN0ID0gZS5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuaWQ7XHJcbiAgICBjb25zb2xlLmxvZyhcInNlbGVjdGVkIHByb2plY3QgaXMgXCIgKyBzZWxlY3RlZFByb2plY3QpXHJcbn1cclxuXHJcbmV4cG9ydCB7c2lkZWJhclByb2plY3RGdW5jdGlvbmFsaXR5LCBzZWxlY3RlZFByb2plY3R9IiwiaW1wb3J0IHtwcm9qZWN0c30gZnJvbSBcIi4vcHJvamVjdExvYWRlclwiXHJcbmltcG9ydCB7bG9hZFByb2plY3RzfSBmcm9tIFwiLi9wcm9qZWN0TG9hZGVyXCJcclxuaW1wb3J0IHtjbG9zZVByb2plY3RGb3JtfSBmcm9tIFwiLi9wcm9qZWN0Rm9ybU9wZW5lckNsb3NlclwiXHJcbmltcG9ydCB7c2VsZWN0ZWRQcm9qZWN0fSBmcm9tIFwiLi9zaWRlYmFyUHJvamVjdExpc3RGdW5jdGlvbmFsaXR5XCJcclxuXHJcbmxldCBmb3JtRWRpdCA9IGZhbHNlO1xyXG5jb25zdCBmb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9qZWN0LWZvcm1cIik7XHJcbmZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCBhZGRVcGRhdGVQcm9qZWN0KTtcclxuZnVuY3Rpb24gYWRkVXBkYXRlUHJvamVjdChlKXtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGlmKGZvcm1FZGl0KXtcclxuICAgICAgICBwcm9qZWN0c1tzZWxlY3RlZFByb2plY3RdLnByb2plY3RUaXRsZSA9IGZvcm0ucXVlcnlTZWxlY3RvcihcIi5wcm9qZWN0LWZvcm0taW5wdXRcIikudmFsdWU7XHJcbiAgICAgICAgZm9ybUVkaXQgPSBmYWxzZTtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInByb2plY3RzX2J5X2JhaGFcIizigK9KU09OLnN0cmluZ2lmeShwcm9qZWN0cykpO1xyXG4gICAgICAgIGxvYWRQcm9qZWN0cygpO1xyXG4gICAgICAgIGNsb3NlUHJvamVjdEZvcm0oKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgcHJvamVjdFRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9qZWN0LWZvcm0taW5wdXRcIikudmFsdWU7XHJcbiAgICAgICAgY29uc3QgbmV3UHJvamVjdCA9IHByb2plY3RDcmVhdG9yKHByb2plY3RUaXRsZSk7XHJcbiAgICAgICAgcHJvamVjdHMucHVzaChuZXdQcm9qZWN0KTtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInByb2plY3RzX2J5X2JhaGFcIizigK9KU09OLnN0cmluZ2lmeShwcm9qZWN0cykpO1xyXG4gICAgICAgIGxvYWRQcm9qZWN0cygpO1xyXG4gICAgICAgIGNsb3NlUHJvamVjdEZvcm0oKTtcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhc2tzXCIpLmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBwcm9qZWN0Q3JlYXRvcihwcm9qZWN0VGl0bGUpe1xyXG4gICAgY29uc29sZS5sb2coXCJmYWN0b3J5IGNhbGxlZFwiKVxyXG4gICAgY29uc3QgaWQgPSBwcm9qZWN0cy5sZW5ndGg7XHJcbiAgICBjb25zdCB0YXNrcyA9IFtdO1xyXG4gICAgcmV0dXJuIHtwcm9qZWN0VGl0bGUsIGlkLCB0YXNrc307XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZUlEcygpe1xyXG4gICAgbGV0IGkgPSAwO1xyXG4gICAgcHJvamVjdHMuZm9yRWFjaChwcm9qZWN0ID0+IHtcclxuICAgICAgICBwcm9qZWN0LmlkID0gaTtcclxuICAgICAgICBpKys7XHJcbiAgICB9KVxyXG59XHJcblxyXG5leHBvcnQge2Zvcm0sIGZvcm1FZGl0LCBzZWxlY3RlZFByb2plY3QsIHVwZGF0ZUlEc30iLCJpbXBvcnQgeyB1cGRhdGVJRHMgfSBmcm9tIFwiLi9hZGRVcGRhdGVQcm9qZWN0XCI7XHJcbmltcG9ydCB7IHByb2plY3RzIH0gZnJvbSBcIi4vcHJvamVjdExvYWRlclwiO1xyXG5pbXBvcnQgeyBsb2FkUHJvamVjdHMgfSBmcm9tIFwiLi9wcm9qZWN0TG9hZGVyXCI7XHJcbmltcG9ydCB7IHNlbGVjdGVkUHJvamVjdCB9IGZyb20gXCIuL3NpZGViYXJQcm9qZWN0TGlzdEZ1bmN0aW9uYWxpdHlcIjtcclxuaW1wb3J0IHsgbWVudWJ1dHRvbnMgfSBmcm9tIFwiLi9ob21lQnV0dG9uc0Z1bmN0aW9uc1wiO1xyXG5pbXBvcnQgeyBsaXN0QWxsVGFza3MgfSBmcm9tIFwiLi9ob21lQnV0dG9uc0Z1bmN0aW9uc1wiO1xyXG5pbXBvcnQge2xpc3RUb2RheXNUYXNrc30gZnJvbSBcIi4vaG9tZUJ1dHRvbnNGdW5jdGlvbnNcIlxyXG5cclxuY29uc3QgZGVsZXRlQnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZGVsZXRlLWJ1dHRvblwiKTtcclxuZGVsZXRlQnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGRlbGV0ZVRoYXRQcm9qZWN0KSk7XHJcbmZ1bmN0aW9uIGRlbGV0ZVRoYXRQcm9qZWN0KGUpe1xyXG4gICAgY29uc3QgZGVjaXNpb24gPSBjb25maXJtKFwiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSBcIiArIHByb2plY3RzW2UuY3VycmVudFRhcmdldC5wYXJlbnROb2RlLmRhdGFzZXQuaWRdLnByb2plY3RUaXRsZSArIFwiICYgdGFza3MgaW5zaWRlIGl0P1wiKTtcclxuICAgIGlmKGRlY2lzaW9uKXtcclxuICAgICAgICBwcm9qZWN0cy5zcGxpY2UoZS5jdXJyZW50VGFyZ2V0LnBhcmVudE5vZGUuZGF0YXNldC5pZCwgMSk7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJwcm9qZWN0c19ieV9iYWhhXCIsIEpTT04uc3RyaW5naWZ5KHByb2plY3RzKSk7XHJcbiAgICAgICAgdXBkYXRlSURzKCk7XHJcbiAgICAgICAgbG9hZFByb2plY3RzKCk7XHJcbiAgICAgICAgc2VsZWN0ZWRQcm9qZWN0ID0gXCJcIjtcclxuICAgICAgICBsaXN0VG9kYXlzVGFza3MoKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHsgZGVsZXRlVGhhdFByb2plY3QgfVxyXG4iLCJpbXBvcnQgeyBkZWxldGVUaGF0UHJvamVjdCB9IGZyb20gXCIuL2RlbGV0ZVByb2plY3RcIjtcclxuaW1wb3J0IHsgc2lkZWJhclByb2plY3RGdW5jdGlvbmFsaXR5IH0gZnJvbSBcIi4vc2lkZWJhclByb2plY3RMaXN0RnVuY3Rpb25hbGl0eVwiO1xyXG5pbXBvcnQgeyBzaWRlYmFyUHJvamVjdHNFZGl0IH0gZnJvbSBcIi4vc2lkZWJhclByb2plY3RFZGl0c1wiO1xyXG5pbXBvcnQgeyB1cGRhdGVJRHMgfSBmcm9tIFwiLi9hZGRVcGRhdGVQcm9qZWN0XCI7XHJcblxyXG5cclxuY29uc3QgcHJvamVjdHMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwicHJvamVjdHNfYnlfYmFoYVwiKSkgfHwgW107XHJcblxyXG5mdW5jdGlvbiBsb2FkUHJvamVjdHMoKXtcclxuICAgIGNvbnN0IGh0bWwgPSBwcm9qZWN0cy5tYXAocHJvamVjdCA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwicHJvamVjdFwiIGRhdGEtaWQ9JHtwcm9qZWN0LmlkfT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInByb2plY3QtdGl0bGVcIj4ke3Byb2plY3QucHJvamVjdFRpdGxlfTwvZGl2PlxyXG4gICAgICAgICAgICA8aW1nIGNsYXNzPVwibWVudS1pY29uIGVkaXQtYnV0dG9uXCIgc3JjPVwiLi4vc3JjL2ltYWdlcy9lZGl0LnBuZ1wiIGFsdD1cImVkaXRcIj5cclxuICAgICAgICAgICAgPGltZyBjbGFzcz1cIm1lbnUtaWNvbiBkZWxldGUtYnV0dG9uXCIgc3JjPVwiLi4vc3JjL2ltYWdlcy9kZWxldGUucG5nXCIgYWx0PVwiZGVsZXRlXCI+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgYDtcclxuICAgIH0pLmpvaW4oXCJcIik7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2plY3RzXCIpLmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2plY3RzXCIpLmlubmVySFRNTCA9IGh0bWw7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnByb2plY3QgLmRlbGV0ZS1idXR0b25cIikuZm9yRWFjaChkZWxldGVCdXR0b24gPT4gZGVsZXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBkZWxldGVUaGF0UHJvamVjdCkpO1xyXG4gICAgdXBkYXRlSURzKCk7XHJcbiAgICAvLyBjb25zdCBzaWRlYmFyUHJvamVjdENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvamVjdHNcIik7XHJcbiAgICAvLyBzaWRlYmFyUHJvamVjdENvbnRhaW5lci5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgLy8gcHJvamVjdHMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgIC8vICAgICBjb25zdCBwcm9qZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIC8vICAgICBwcm9qZWN0LmNsYXNzTGlzdC5hZGQoXCJwcm9qZWN0XCIpO1xyXG4gICAgLy8gICAgIHByb2plY3QuZGF0YXNldC5pZCA9IGl0ZW0uaWQ7XHJcbiAgICAvLyAgICAgY29uc3QgcHJvamVjdFRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIC8vICAgICBwcm9qZWN0VGl0bGUuY2xhc3NMaXN0LmFkZChcInByb2plY3QtdGl0bGVcIik7XHJcbiAgICAvLyAgICAgcHJvamVjdFRpdGxlLnRleHRDb250ZW50ID0gaXRlbS5wcm9qZWN0VGl0bGU7XHJcbiAgICAvLyAgICAgY29uc3QgZWRpdEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XHJcbiAgICAvLyAgICAgZWRpdEJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwibWVudS1pY29uXCIpO1xyXG4gICAgLy8gICAgIGVkaXRCdXR0b24uY2xhc3NMaXN0LmFkZChcImVkaXQtYnV0dG9uXCIpO1xyXG4gICAgLy8gICAgIGVkaXRCdXR0b24uc2V0QXR0cmlidXRlKFwic3JjXCIsIFwiLi4vc3JjL2ltYWdlcy9lZGl0LnBuZ1wiKTtcclxuICAgIC8vICAgICBjb25zdCBkZWxldGVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xyXG4gICAgLy8gICAgIGRlbGV0ZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwibWVudS1pY29uXCIpO1xyXG4gICAgLy8gICAgIGRlbGV0ZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiZGVsZXRlLWJ1dHRvblwiKTtcclxuICAgIC8vICAgICBkZWxldGVCdXR0b24uc2V0QXR0cmlidXRlKFwic3JjXCIsIFwiLi4vc3JjL2ltYWdlcy9kZWxldGUucG5nXCIpO1xyXG4gICAgLy8gICAgIGRlbGV0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZGVsZXRlVGhhdFByb2plY3QpO1xyXG4gICAgLy8gICAgIHByb2plY3QuYXBwZW5kQ2hpbGQocHJvamVjdFRpdGxlKTtcclxuICAgIC8vICAgICBwcm9qZWN0LmFwcGVuZENoaWxkKGVkaXRCdXR0b24pO1xyXG4gICAgLy8gICAgIHByb2plY3QuYXBwZW5kQ2hpbGQoZGVsZXRlQnV0dG9uKTtcclxuICAgIC8vICAgICBzaWRlYmFyUHJvamVjdENvbnRhaW5lci5hcHBlbmRDaGlsZChwcm9qZWN0KTtcclxuICAgIC8vIH0pXHJcbiAgICBzaWRlYmFyUHJvamVjdEZ1bmN0aW9uYWxpdHkoKTtcclxuICAgIHNpZGViYXJQcm9qZWN0c0VkaXQoKTtcclxufVxyXG5cclxuZXhwb3J0IHtsb2FkUHJvamVjdHMsIHByb2plY3RzfSIsImltcG9ydCB7Zm9ybUVkaXR9IGZyb20gXCIuL2FkZFVwZGF0ZVByb2plY3RcIlxyXG5pbXBvcnQgeyBvcGVuUHJvamVjdEZvcm0gfSBmcm9tIFwiLi9wcm9qZWN0Rm9ybU9wZW5lckNsb3NlclwiO1xyXG5pbXBvcnQge2Zvcm19IGZyb20gXCIuL2FkZFVwZGF0ZVByb2plY3RcIlxyXG5cclxubGV0IHNlbGVjdGVkUHJvamVjdCA9IFwiXCI7XHJcbmZ1bmN0aW9uIHNpZGViYXJQcm9qZWN0c0VkaXQoKXtcclxuICAgIGNvbnN0IGVkaXRCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5lZGl0LWJ1dHRvblwiKTtcclxuICAgIGVkaXRCdXR0b25zLmZvckVhY2goYnV0dG9uID0+IGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdmlld1Byb2plY3RFZGl0Rm9ybSkpO1xyXG4gICAgZnVuY3Rpb24gdmlld1Byb2plY3RFZGl0Rm9ybShlKXtcclxuICAgICAgICBvcGVuUHJvamVjdEZvcm0oKTtcclxuICAgICAgICBmb3JtRWRpdCA9IHRydWU7XHJcbiAgICAgICAgZm9ybS5xdWVyeVNlbGVjdG9yKFwiLnByb2plY3QtZm9ybS1pbnB1dFwiKS52YWx1ZSA9IGUudGFyZ2V0LnBhcmVudE5vZGUudGV4dENvbnRlbnQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7c2lkZWJhclByb2plY3RzRWRpdH0iLCJpbXBvcnQgeyBzZWxlY3RlZFByb2plY3QgfSBmcm9tIFwiLi9zaWRlYmFyUHJvamVjdExpc3RGdW5jdGlvbmFsaXR5XCI7XHJcbmltcG9ydCB7IHByb2plY3RzIH0gZnJvbSBcIi4vcHJvamVjdExvYWRlclwiXHJcbmltcG9ydCB7IGxvYWRQcm9qZWN0c1Rhc2tzIH0gZnJvbSBcIi4vdGFza0xvYWRlclwiO1xyXG5cclxuY29uc3QgdGFza0Zvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhc2stZm9ybVwiKTtcclxuY29uc3QgYWRkVGFza0J1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkLXRhc2tcIik7XHJcblxyXG5hZGRUYXNrQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBvcGVuVGFza0Zvcm0pXHJcbmZ1bmN0aW9uIG9wZW5UYXNrRm9ybSgpe1xyXG4gICAgY29uc29sZS5sb2coXCJuZXcgdGFzayB3aWxsIGJlIGFkZGVkIHRvIHByb2plY3Q6IFwiICsgc2VsZWN0ZWRQcm9qZWN0KTtcclxuICAgIGNvbnNvbGUubG9nKHByb2plY3RzW3NlbGVjdGVkUHJvamVjdF0pO1xyXG4gICAgdGFza0Zvcm0uY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcclxuICAgIGFkZFRhc2tCdXR0b24uY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcclxufVxyXG5cclxuY29uc3QgdGFza0Zvcm1DYW5jZWxCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhc2stZm9ybS1idXR0b24uY2FuY2VsXCIpO1xyXG50YXNrRm9ybUNhbmNlbEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgY2xvc2VUYXNrRm9ybSk7XHJcbmZ1bmN0aW9uIGNsb3NlVGFza0Zvcm0oKXtcclxuICAgIHRhc2tGb3JtLmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIik7XHJcbiAgICBhZGRUYXNrQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XHJcbiAgICB0YXNrRm9ybS5yZXNldCgpO1xyXG59XHJcblxyXG50YXNrRm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIGNyZWF0ZVRhc2spO1xyXG5mdW5jdGlvbiBjcmVhdGVUYXNrKGUpe1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhc2stZm9ybSAjdGFzay10aXRsZVwiKS52YWx1ZTtcclxuICAgIGNvbnN0IGRldGFpbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGFzay1mb3JtICN0YXNrLWRldGFpbHNcIikudmFsdWU7XHJcbiAgICBjb25zdCBkdWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhc2stZm9ybSAjdGFzay1kdWUtZGF0ZVwiKS52YWx1ZTtcclxuICAgIGNvbnN0IG5ld1Rhc2sgPSB0YXNrQ29uc3RydWN0b3IodGl0bGUsIGRldGFpbCwgZHVlKTtcclxuICAgIHByb2plY3RzW3NlbGVjdGVkUHJvamVjdF0udGFza3MucHVzaChuZXdUYXNrKTtcclxuICAgIGNvbnNvbGUubG9nKHByb2plY3RzW3NlbGVjdGVkUHJvamVjdF0udGFza3MpXHJcbiAgICBjbG9zZVRhc2tGb3JtKCk7XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInByb2plY3RzX2J5X2JhaGFcIizigK9KU09OLnN0cmluZ2lmeShwcm9qZWN0cykpO1xyXG4gICAgbG9hZFByb2plY3RzVGFza3MoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdGFza0NvbnN0cnVjdG9yKHRpdGxlLCBkZXRhaWwsIGR1ZSl7XHJcbiAgICBjb25zdCBkb25lID0gZmFsc2U7XHJcbiAgICBjb25zdCBpbXBvcnRhbmNlID0gZmFsc2U7XHJcbiAgICBjb25zdCBpZCA9IHByb2plY3RzW3NlbGVjdGVkUHJvamVjdF0udGFza3MubGVuZ3RoO1xyXG4gICAgY29uc3QgcHJvamVjdElEID0gcHJvamVjdHNbc2VsZWN0ZWRQcm9qZWN0XS5pZDtcclxuICAgIHJldHVybiB7aWQsIGRvbmUsIHRpdGxlLCBkZXRhaWwsIGR1ZSwgaW1wb3J0YW5jZSwgcHJvamVjdElEfVxyXG59XHJcblxyXG5leHBvcnQge2FkZFRhc2tCdXR0b259IiwiaW1wb3J0IHsgc2lkZWJhck9wZW5lciB9IGZyb20gXCIuL3NpZGViYXJPcGVuZXJcIjtcbmltcG9ydCB7IGxvYWRQcm9qZWN0cyB9IGZyb20gXCIuL3Byb2plY3RMb2FkZXJcIjtcbmltcG9ydCB7Zm9ybUVkaXQsIHNlbGVjdGVkUHJvamVjdH0gZnJvbSBcIi4vYWRkVXBkYXRlUHJvamVjdFwiXG5pbXBvcnQge2FkZFRhc2tCdXR0b259IGZyb20gXCIuL3Rhc2tDcmVhdG9yXCJcbmltcG9ydCB7bG9hZFByb2plY3RzVGFza3N9IGZyb20gXCIuL3Rhc2tMb2FkZXJcIlxuaW1wb3J0IHtsaXN0QWxsVGFza3N9IGZyb20gXCIuL2hvbWVCdXR0b25zRnVuY3Rpb25zXCJcblxubG9hZFByb2plY3RzKCk7XG5saXN0QWxsVGFza3MoKTtcbiJdLCJuYW1lcyI6WyJzaWRlYmFyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwic2lkZWJhck9wZW5lciIsIm1haW4iLCJzaWRlYmFyU2hvd24iLCJvcGVuUHJvamVjdEZvcm0iLCJjbG9zZVByb2plY3RGb3JtIiwidmFsdWUiLCJyZXF1aXJlZEFyZ3MiLCJyZXF1aXJlZCIsImFyZ3MiLCJsZW5ndGgiLCJUeXBlRXJyb3IiLCJ0b0RhdGUiLCJhcmd1bWVudCIsImFyZ3VtZW50cyIsImFyZ1N0ciIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsIkRhdGUiLCJnZXRUaW1lIiwiY29uc29sZSIsIndhcm4iLCJFcnJvciIsInN0YWNrIiwiTmFOIiwiYWRkRnVuY3Rpb25hbGl0eVRvVGFza3MiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImEiLCJhZGRFdmVudExpc3RlbmVyIiwiY29tcGxldGVUYXNrIiwiZmF2b3JpdGVUYXNrIiwidGhpcyIsImNoZWNrZWQiLCJwcm9qZWN0cyIsInBhcmVudE5vZGUiLCJkYXRhc2V0IiwicHJvamVjdCIsInRhc2tzIiwiaWQiLCJpbXBvcnRhbmNlIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJkb25lIiwic3R5bGUiLCJkaXNwbGF5IiwiZ3JpZFRlbXBsYXRlQ29sdW1ucyIsIm1lbnVidXR0b25zIiwiY29udGVudFRpdGxlIiwibGlzdEFsbFRhc2tzIiwiaHRtbCIsIm1hcCIsInRhc2siLCJwcm9qZWN0SUQiLCJ0aXRsZSIsImR1ZSIsImRldGFpbCIsImpvaW4iLCJpbm5lckhUTUwiLCJsaXN0VG9kYXlzVGFza3MiLCJkaXJ0eURhdGVMZWZ0IiwiZGlydHlEYXRlUmlnaHQiLCJkYXRlTGVmdCIsImRhdGVSaWdodCIsImRpZmYiLCJjb21wYXJlQXNjIiwicGFyc2UiLCJ0b0lTT1N0cmluZyIsInNwbGl0IiwiYnV0dG9uIiwiZSIsImNsYXNzTGlzdCIsInJlbW92ZSIsInRhcmdldCIsImFkZCIsInNlbGVjdEJ1dHRvbiIsInRleHRDb250ZW50IiwidXBkYXRlQ29udGVudFRpdGxlIiwibG9hZFByb2plY3RzVGFza3MiLCJsb2ciLCJzZWxlY3RlZFByb2plY3QiLCJmb3JtRWRpdCIsInVwZGF0ZUlEcyIsImkiLCJkZWxldGVUaGF0UHJvamVjdCIsImNvbmZpcm0iLCJjdXJyZW50VGFyZ2V0IiwicHJvamVjdFRpdGxlIiwic3BsaWNlIiwibG9hZFByb2plY3RzIiwicHJldmVudERlZmF1bHQiLCJuZXdQcm9qZWN0IiwicHJvamVjdENyZWF0b3IiLCJwdXNoIiwiZ2V0SXRlbSIsImRlbGV0ZUJ1dHRvbiIsImhpZ2hsaWdodFByb2plY3QiLCJ1cGRhdGVTZWxlY3RlZFByb2plY3QiLCJ2aWV3UHJvamVjdEVkaXRGb3JtIiwic2lkZWJhclByb2plY3RzRWRpdCIsInRhc2tGb3JtIiwiYWRkVGFza0J1dHRvbiIsImNsb3NlVGFza0Zvcm0iLCJyZXNldCIsIm5ld1Rhc2siLCJ0YXNrQ29uc3RydWN0b3IiXSwic291cmNlUm9vdCI6IiJ9