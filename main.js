(()=>{"use strict";const e=document.querySelector(".sidebar"),t=document.querySelector(".side-menu-opener"),n=document.querySelector(".main");let o=!0;function c(){u.style.display="flex"}function s(){document.querySelector(".project-form-input").value="",u.style.display="none"}t.addEventListener("click",(function(){o?(e.style.display="none",n.style.gridTemplateColumns="1fr",o=!1):(e.style.display="block",n.style.gridTemplateColumns="350px 1fr",o=!0)})),document.querySelector(".add-button").addEventListener("click",c),document.querySelector(".project-form-button.cancel").addEventListener("click",s);const r=document.querySelectorAll(".sidebar-item"),l=document.querySelector(".content-title");r.forEach((e=>e.addEventListener("click",(e=>{!function(e){r.forEach((e=>e.classList.remove("active"))),document.querySelectorAll(".project").forEach((e=>e.classList.remove("active"))),e.target.classList.add("active")}(e),function(e){l.textContent="",l.textContent=e.target.textContent,document.querySelector(".add-task").classList.add("hidden")}(e)}))));const a=document.querySelector(".tasks");let i="";let d=!1;const u=document.querySelector(".project-form");function m(){let e=0;f.forEach((t=>{t.id=e,e++}))}function p(e){console.log(i),confirm("Are you sure you want to delete this project & tasks inside it?")&&(f.splice(i,1),localStorage.setItem("projects_by_baha",JSON.stringify(f))),m(),y()}u.addEventListener("submit",(function(e){if(e.preventDefault(),d)console.log(i),f[i].projectTitle=u.querySelector(".project-form-input").value,d=!1,localStorage.setItem("projects_by_baha",JSON.stringify(f)),y(),s();else{const e=function(e){console.log("factory called");return{projectTitle:e,id:f.length,tasks:[]}}(document.querySelector(".project-form-input").value);f.push(e),console.log(f),localStorage.setItem("projects_by_baha",JSON.stringify(f)),m(),y(),s()}})),document.querySelectorAll(".delete-button").forEach((e=>e.addEventListener("click",p)));const f=JSON.parse(localStorage.getItem("projects_by_baha"))||[];function y(){const e=document.querySelector(".projects");e.innerHTML="",f.forEach((t=>{const n=document.createElement("div");n.classList.add("project"),n.dataset.id=t.id;const o=document.createElement("div");o.classList.add("project-title"),o.textContent=t.projectTitle;const c=document.createElement("img");c.classList.add("menu-icon"),c.classList.add("edit-button"),c.setAttribute("src","../src/images/edit.png");const s=document.createElement("img");s.classList.add("menu-icon"),s.classList.add("delete-button"),s.setAttribute("src","../src/images/delete.png"),s.addEventListener("click",p),n.appendChild(o),n.appendChild(c),n.appendChild(s),e.appendChild(n)})),function(){const e=document.querySelectorAll(".project");e.forEach((t=>t.addEventListener("click",(t=>{!function(t){e.forEach((e=>e.classList.remove("active"))),r.forEach((e=>e.classList.remove("active"))),t.currentTarget.classList.add("active")}(t),document.querySelector(".add-task").classList.remove("hidden"),function(e){document.querySelector(".content-title").textContent=e.currentTarget.textContent}(t),function(e){i=e.currentTarget.dataset.id,console.log("selected project is "+i)}(t),function(){if(console.log(f),"projects[selectedProject].tasks.length is "+f[i].tasks.length==0)console.log(f[i].tasks.length),a.innerHTML="",a.textContent="Yayyyy! No Tasks!";else{a.innerHTML="";const e=f[i].tasks.map((e=>`\n            <div class="task-container" data-id="${e.id}">\n                <input type="checkbox" id="task-done">\n                <div class="task-title">${e.title}</div>\n                <div class="due-date">${e.due}</div>\n                <input type="checkbox" id="task-importance">\n                <div class="task-details">${e.detail}</div>\n                <img class="menu-icon delete-button" src="../src/images/delete.png">\n            </div>`)).join("");a.innerHTML=e,console.log(e)}}()}))))}(),function(){function e(e){c(),d=!0,u.querySelector(".project-form-input").value=e.target.parentNode.textContent}document.querySelectorAll(".edit-button").forEach((t=>t.addEventListener("click",e)))}()}const v=document.querySelector(".task-form"),g=document.querySelector(".add-task");function k(){v.classList.add("hidden"),g.classList.remove("hidden"),v.reset()}g.addEventListener("click",(function(){console.log("new task will be added to project: "+i),console.log(f[i]),v.classList.remove("hidden"),g.classList.add("hidden")})),document.querySelector(".task-form-button.cancel").addEventListener("click",k),v.addEventListener("submit",(function(e){e.preventDefault();const t=function(e,t,n){return{id:f[i].tasks.length,done:!1,title:e,detail:t,due:n,importantance:!1}}(document.querySelector(".task-form #task-title").value,document.querySelector(".task-form #task-details").value,document.querySelector(".task-form #task-due-date").value);f[i].tasks.push(t),console.log(f[i].tasks),k()})),y()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,